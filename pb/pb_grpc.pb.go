// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pb/pb.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginClient is the client API for Login service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginClient interface {
	// Sends a login request.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
}

type loginClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginClient(cc grpc.ClientConnInterface) LoginClient {
	return &loginClient{cc}
}

func (c *loginClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/pb.Login/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginServer is the server API for Login service.
// All implementations must embed UnimplementedLoginServer
// for forward compatibility
type LoginServer interface {
	// Sends a login request.
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	mustEmbedUnimplementedLoginServer()
}

// UnimplementedLoginServer must be embedded to have forward compatible implementations.
type UnimplementedLoginServer struct {
}

func (UnimplementedLoginServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLoginServer) mustEmbedUnimplementedLoginServer() {}

// UnsafeLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginServer will
// result in compilation errors.
type UnsafeLoginServer interface {
	mustEmbedUnimplementedLoginServer()
}

func RegisterLoginServer(s grpc.ServiceRegistrar, srv LoginServer) {
	s.RegisterService(&Login_ServiceDesc, srv)
}

func _Login_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Login/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Login_ServiceDesc is the grpc.ServiceDesc for Login service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Login_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Login",
	HandlerType: (*LoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Login_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}

// RegisterAreaClient is the client API for RegisterArea service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterAreaClient interface {
	// Sends a RegisterArea request.
	Login(ctx context.Context, in *RegisterAreaRequest, opts ...grpc.CallOption) (*RegisterAreaReply, error)
}

type registerAreaClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterAreaClient(cc grpc.ClientConnInterface) RegisterAreaClient {
	return &registerAreaClient{cc}
}

func (c *registerAreaClient) Login(ctx context.Context, in *RegisterAreaRequest, opts ...grpc.CallOption) (*RegisterAreaReply, error) {
	out := new(RegisterAreaReply)
	err := c.cc.Invoke(ctx, "/pb.RegisterArea/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterAreaServer is the server API for RegisterArea service.
// All implementations must embed UnimplementedRegisterAreaServer
// for forward compatibility
type RegisterAreaServer interface {
	// Sends a RegisterArea request.
	Login(context.Context, *RegisterAreaRequest) (*RegisterAreaReply, error)
	mustEmbedUnimplementedRegisterAreaServer()
}

// UnimplementedRegisterAreaServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterAreaServer struct {
}

func (UnimplementedRegisterAreaServer) Login(context.Context, *RegisterAreaRequest) (*RegisterAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRegisterAreaServer) mustEmbedUnimplementedRegisterAreaServer() {}

// UnsafeRegisterAreaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterAreaServer will
// result in compilation errors.
type UnsafeRegisterAreaServer interface {
	mustEmbedUnimplementedRegisterAreaServer()
}

func RegisterRegisterAreaServer(s grpc.ServiceRegistrar, srv RegisterAreaServer) {
	s.RegisterService(&RegisterArea_ServiceDesc, srv)
}

func _RegisterArea_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterAreaServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RegisterArea/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterAreaServer).Login(ctx, req.(*RegisterAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterArea_ServiceDesc is the grpc.ServiceDesc for RegisterArea service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterArea_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RegisterArea",
	HandlerType: (*RegisterAreaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _RegisterArea_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/pb.proto",
}
