// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sisco/ent/area"
	"sisco/ent/predicate"
	"sisco/ent/service"
	"sisco/ent/tag"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ServiceUpdate) SetName(s string) *ServiceUpdate {
	su.mutation.SetName(s)
	return su
}

// SetDescription sets the "description" field.
func (su *ServiceUpdate) SetDescription(s string) *ServiceUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableDescription(s *string) *ServiceUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *ServiceUpdate) ClearDescription() *ServiceUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetProtocol sets the "protocol" field.
func (su *ServiceUpdate) SetProtocol(s string) *ServiceUpdate {
	su.mutation.SetProtocol(s)
	return su
}

// SetHost sets the "host" field.
func (su *ServiceUpdate) SetHost(s string) *ServiceUpdate {
	su.mutation.SetHost(s)
	return su
}

// SetPort sets the "port" field.
func (su *ServiceUpdate) SetPort(s string) *ServiceUpdate {
	su.mutation.SetPort(s)
	return su
}

// SetAvailable sets the "available" field.
func (su *ServiceUpdate) SetAvailable(b bool) *ServiceUpdate {
	su.mutation.SetAvailable(b)
	return su
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableAvailable(b *bool) *ServiceUpdate {
	if b != nil {
		su.SetAvailable(*b)
	}
	return su
}

// SetHeartbeat sets the "heartbeat" field.
func (su *ServiceUpdate) SetHeartbeat(t time.Time) *ServiceUpdate {
	su.mutation.SetHeartbeat(t)
	return su
}

// SetNillableHeartbeat sets the "heartbeat" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableHeartbeat(t *time.Time) *ServiceUpdate {
	if t != nil {
		su.SetHeartbeat(*t)
	}
	return su
}

// SetOwner sets the "owner" field.
func (su *ServiceUpdate) SetOwner(s string) *ServiceUpdate {
	su.mutation.SetOwner(s)
	return su
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (su *ServiceUpdate) AddTagIDs(ids ...int) *ServiceUpdate {
	su.mutation.AddTagIDs(ids...)
	return su
}

// AddTags adds the "tags" edges to the Tag entity.
func (su *ServiceUpdate) AddTags(t ...*Tag) *ServiceUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTagIDs(ids...)
}

// SetAreaID sets the "area" edge to the Area entity by ID.
func (su *ServiceUpdate) SetAreaID(id int) *ServiceUpdate {
	su.mutation.SetAreaID(id)
	return su
}

// SetNillableAreaID sets the "area" edge to the Area entity by ID if the given value is not nil.
func (su *ServiceUpdate) SetNillableAreaID(id *int) *ServiceUpdate {
	if id != nil {
		su = su.SetAreaID(*id)
	}
	return su
}

// SetArea sets the "area" edge to the Area entity.
func (su *ServiceUpdate) SetArea(a *Area) *ServiceUpdate {
	return su.SetAreaID(a.ID)
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (su *ServiceUpdate) ClearTags() *ServiceUpdate {
	su.mutation.ClearTags()
	return su
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (su *ServiceUpdate) RemoveTagIDs(ids ...int) *ServiceUpdate {
	su.mutation.RemoveTagIDs(ids...)
	return su
}

// RemoveTags removes "tags" edges to Tag entities.
func (su *ServiceUpdate) RemoveTags(t ...*Tag) *ServiceUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTagIDs(ids...)
}

// ClearArea clears the "area" edge to the Area entity.
func (su *ServiceUpdate) ClearArea() *ServiceUpdate {
	su.mutation.ClearArea()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: service.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(service.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(service.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.Protocol(); ok {
		_spec.SetField(service.FieldProtocol, field.TypeString, value)
	}
	if value, ok := su.mutation.Host(); ok {
		_spec.SetField(service.FieldHost, field.TypeString, value)
	}
	if value, ok := su.mutation.Port(); ok {
		_spec.SetField(service.FieldPort, field.TypeString, value)
	}
	if value, ok := su.mutation.Available(); ok {
		_spec.SetField(service.FieldAvailable, field.TypeBool, value)
	}
	if value, ok := su.mutation.Heartbeat(); ok {
		_spec.SetField(service.FieldHeartbeat, field.TypeTime, value)
	}
	if value, ok := su.mutation.Owner(); ok {
		_spec.SetField(service.FieldOwner, field.TypeString, value)
	}
	if su.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   service.TagsTable,
			Columns: service.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTagsIDs(); len(nodes) > 0 && !su.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   service.TagsTable,
			Columns: service.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   service.TagsTable,
			Columns: service.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.AreaTable,
			Columns: []string{service.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.AreaTable,
			Columns: []string{service.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceMutation
}

// SetName sets the "name" field.
func (suo *ServiceUpdateOne) SetName(s string) *ServiceUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetDescription sets the "description" field.
func (suo *ServiceUpdateOne) SetDescription(s string) *ServiceUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableDescription(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *ServiceUpdateOne) ClearDescription() *ServiceUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetProtocol sets the "protocol" field.
func (suo *ServiceUpdateOne) SetProtocol(s string) *ServiceUpdateOne {
	suo.mutation.SetProtocol(s)
	return suo
}

// SetHost sets the "host" field.
func (suo *ServiceUpdateOne) SetHost(s string) *ServiceUpdateOne {
	suo.mutation.SetHost(s)
	return suo
}

// SetPort sets the "port" field.
func (suo *ServiceUpdateOne) SetPort(s string) *ServiceUpdateOne {
	suo.mutation.SetPort(s)
	return suo
}

// SetAvailable sets the "available" field.
func (suo *ServiceUpdateOne) SetAvailable(b bool) *ServiceUpdateOne {
	suo.mutation.SetAvailable(b)
	return suo
}

// SetNillableAvailable sets the "available" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableAvailable(b *bool) *ServiceUpdateOne {
	if b != nil {
		suo.SetAvailable(*b)
	}
	return suo
}

// SetHeartbeat sets the "heartbeat" field.
func (suo *ServiceUpdateOne) SetHeartbeat(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetHeartbeat(t)
	return suo
}

// SetNillableHeartbeat sets the "heartbeat" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableHeartbeat(t *time.Time) *ServiceUpdateOne {
	if t != nil {
		suo.SetHeartbeat(*t)
	}
	return suo
}

// SetOwner sets the "owner" field.
func (suo *ServiceUpdateOne) SetOwner(s string) *ServiceUpdateOne {
	suo.mutation.SetOwner(s)
	return suo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (suo *ServiceUpdateOne) AddTagIDs(ids ...int) *ServiceUpdateOne {
	suo.mutation.AddTagIDs(ids...)
	return suo
}

// AddTags adds the "tags" edges to the Tag entity.
func (suo *ServiceUpdateOne) AddTags(t ...*Tag) *ServiceUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTagIDs(ids...)
}

// SetAreaID sets the "area" edge to the Area entity by ID.
func (suo *ServiceUpdateOne) SetAreaID(id int) *ServiceUpdateOne {
	suo.mutation.SetAreaID(id)
	return suo
}

// SetNillableAreaID sets the "area" edge to the Area entity by ID if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableAreaID(id *int) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetAreaID(*id)
	}
	return suo
}

// SetArea sets the "area" edge to the Area entity.
func (suo *ServiceUpdateOne) SetArea(a *Area) *ServiceUpdateOne {
	return suo.SetAreaID(a.ID)
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (suo *ServiceUpdateOne) ClearTags() *ServiceUpdateOne {
	suo.mutation.ClearTags()
	return suo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (suo *ServiceUpdateOne) RemoveTagIDs(ids ...int) *ServiceUpdateOne {
	suo.mutation.RemoveTagIDs(ids...)
	return suo
}

// RemoveTags removes "tags" edges to Tag entities.
func (suo *ServiceUpdateOne) RemoveTags(t ...*Tag) *ServiceUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTagIDs(ids...)
}

// ClearArea clears the "area" edge to the Area entity.
func (suo *ServiceUpdateOne) ClearArea() *ServiceUpdateOne {
	suo.mutation.ClearArea()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServiceUpdateOne) Select(field string, fields ...string) *ServiceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Service entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	var (
		err  error
		node *Service
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Service)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ServiceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: service.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Service.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for _, f := range fields {
			if !service.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(service.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(service.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(service.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.Protocol(); ok {
		_spec.SetField(service.FieldProtocol, field.TypeString, value)
	}
	if value, ok := suo.mutation.Host(); ok {
		_spec.SetField(service.FieldHost, field.TypeString, value)
	}
	if value, ok := suo.mutation.Port(); ok {
		_spec.SetField(service.FieldPort, field.TypeString, value)
	}
	if value, ok := suo.mutation.Available(); ok {
		_spec.SetField(service.FieldAvailable, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Heartbeat(); ok {
		_spec.SetField(service.FieldHeartbeat, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Owner(); ok {
		_spec.SetField(service.FieldOwner, field.TypeString, value)
	}
	if suo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   service.TagsTable,
			Columns: service.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !suo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   service.TagsTable,
			Columns: service.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   service.TagsTable,
			Columns: service.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AreaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.AreaTable,
			Columns: []string{service.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.AreaTable,
			Columns: []string{service.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Service{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
