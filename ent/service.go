// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"sisco/ent/area"
	"sisco/ent/service"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Service is the model entity for the Service schema.
type Service struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Protocol holds the value of the "protocol" field.
	Protocol string `json:"protocol,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// Port holds the value of the "port" field.
	Port string `json:"port,omitempty"`
	// Available holds the value of the "available" field.
	Available bool `json:"available,omitempty"`
	// Heartbeat holds the value of the "heartbeat" field.
	Heartbeat time.Time `json:"heartbeat,omitempty"`
	// Owner holds the value of the "owner" field.
	Owner string `json:"owner,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceQuery when eager-loading is set.
	Edges         ServiceEdges `json:"edges"`
	area_services *int
}

// ServiceEdges holds the relations/edges for other nodes in the graph.
type ServiceEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Area holds the value of the area edge.
	Area *Area `json:"area,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// AreaOrErr returns the Area value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) AreaOrErr() (*Area, error) {
	if e.loadedTypes[1] {
		if e.Area == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: area.Label}
		}
		return e.Area, nil
	}
	return nil, &NotLoadedError{edge: "area"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Service) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case service.FieldAvailable:
			values[i] = new(sql.NullBool)
		case service.FieldID:
			values[i] = new(sql.NullInt64)
		case service.FieldName, service.FieldDescription, service.FieldProtocol, service.FieldHost, service.FieldPort, service.FieldOwner:
			values[i] = new(sql.NullString)
		case service.FieldHeartbeat:
			values[i] = new(sql.NullTime)
		case service.ForeignKeys[0]: // area_services
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Service", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Service fields.
func (s *Service) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case service.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case service.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case service.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case service.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				s.Protocol = value.String
			}
		case service.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				s.Host = value.String
			}
		case service.FieldPort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				s.Port = value.String
			}
		case service.FieldAvailable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field available", values[i])
			} else if value.Valid {
				s.Available = value.Bool
			}
		case service.FieldHeartbeat:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field heartbeat", values[i])
			} else if value.Valid {
				s.Heartbeat = value.Time
			}
		case service.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				s.Owner = value.String
			}
		case service.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field area_services", value)
			} else if value.Valid {
				s.area_services = new(int)
				*s.area_services = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTags queries the "tags" edge of the Service entity.
func (s *Service) QueryTags() *TagQuery {
	return (&ServiceClient{config: s.config}).QueryTags(s)
}

// QueryArea queries the "area" edge of the Service entity.
func (s *Service) QueryArea() *AreaQuery {
	return (&ServiceClient{config: s.config}).QueryArea(s)
}

// Update returns a builder for updating this Service.
// Note that you need to call Service.Unwrap() before calling this method if this Service
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Service) Update() *ServiceUpdateOne {
	return (&ServiceClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Service entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Service) Unwrap() *Service {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Service is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Service) String() string {
	var builder strings.Builder
	builder.WriteString("Service(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(s.Protocol)
	builder.WriteString(", ")
	builder.WriteString("host=")
	builder.WriteString(s.Host)
	builder.WriteString(", ")
	builder.WriteString("port=")
	builder.WriteString(s.Port)
	builder.WriteString(", ")
	builder.WriteString("available=")
	builder.WriteString(fmt.Sprintf("%v", s.Available))
	builder.WriteString(", ")
	builder.WriteString("heartbeat=")
	builder.WriteString(s.Heartbeat.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(s.Owner)
	builder.WriteByte(')')
	return builder.String()
}

// Services is a parsable slice of Service.
type Services []*Service

func (s Services) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
